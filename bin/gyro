#!/usr/bin/env ruby

# Copyright 2016 - Niji
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

abort 'error: gyro requires Ruby 2 or higher.' if RUBY_VERSION < '2.0.0'

require 'gyro'
require 'optparse'
require 'pathname'

dir = Dir.pwd
options = {
  model: nil,
  template: nil,
  output: nil,
  params: {}
}

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: gyro [options]'
  opts.on('-m PATH', '--model PATH', 'The .xcdatamodel file to use') do |xcdatamodel_path|
    options[:model] = xcdatamodel_path
  end
  opts.on('-t DIR', '--template DIR',
          'Path to the template directory to use, or name of a template embedded in gyro',
          '(see --list for available names)') do |path|
    options[:template] = path
  end
  opts.on('-o DIR', '--output DIR',
          'Path to the output directory where to generate the model files') do |path|
    options[:output] = path
  end
  opts.on('-p KEY:VALUE', '--param KEY:VALUE',
          'Specify a custom parameter that can be used by the template.',
          'Can be repeated to add more parameters') do |params|
    (k, *v) = params.split(':')
    options[:params] = options[:params].merge(k.to_s => v.join(':').to_s)
  end
  opts.on('-l', '--list', 'List the names of all available templates provided by gyro') do
    Gyro::Template.print_list
    exit
  end
  opts.on('-i', '--info TEMPLATE',
          'Show information about the given template',
          '(path to directory or name of an embedded template)') do |template|
    Gyro::Template.print_infos(template)
    exit
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 1
  end
  opts.on_tail('-v', '--version', 'Show version') do
    puts Gyro::VERSION
    exit
  end
end

begin
  parser.parse!(ARGV)
rescue OptionParser::ParseError => e
  Gyro::Log.error(e)
  puts parser
  exit 1
end

if options[:model].nil?
  Gyro::Log.info('No model provided, trying to find one in the local directoryâ€¦')
  options[:model] = Gyro::Parser::XCDataModel.find_in_dir(dir)
  Gyro::Log.info("Unable to find any .xcdatamodel in #{dir}") if options[:model].nil?
end

if options[:model].nil?
  Gyro::Log.fail!('You need to specify .xcdatamodel path using --model option (see --help for more info)')
else
  basename = File.basename(options[:model])
  dirname = File.dirname(options[:model])
  Gyro::Log.success("Using #{basename} in #{dirname}")
end

# Liquid Templates
if options[:template].nil?
  # Generate JSON if no -t is specified
  Gyro::Log.info('Note: You can specify a template using the --template option (see --help for more info)')
  xcdatamodel = Gyro::Parser::XCDataModel::XCDataModel.new(options[:model])
  Gyro::Generator::Json.new(xcdatamodel)
  exit
end

template_dir = Gyro::Template.find(options[:template])

if options[:output].nil?
  Gyro::Log.fail!('You need to specify output directory path using --output option (see --help for more info)')
end

output_dir = Pathname.new(options[:output])

unless output_dir.exist?
  Gyro::Log.fail!("The output directory #{output_dir} does not exist. Please create it first.")
end

puts <<-INFO.gsub(/  \|/, '')
  |
  |#===================================
  |# Template    : #{template_dir}
  |# Output Dir  : #{output_dir}
  |# Params      : #{options[:params].inspect}
  |#===================================
INFO

xcdatamodel = Gyro::Parser::XCDataModel::XCDataModel.new(options[:model])
gen = Gyro::Generator::Liquid.new(template_dir, output_dir, options[:params])
gen.generate(xcdatamodel)
