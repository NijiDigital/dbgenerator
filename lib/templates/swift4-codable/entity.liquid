/* DO NOT EDIT | Generated by gyro */

import Foundation
import RealmSwift

{% if params.public %}public {% endif %}final class {{ entity.name }}: Object, Decodable {
  {%- include 'inc/attributes_enum' -%}
  {% include 'inc/attributes_properties' %}
  {% include 'inc/primary_key' -%}
  {% include 'inc/indexed_properties' -%}
  {% include 'inc/ignored_properties' %}
  {% if params.public %}public {% endif %}enum CodingKeys: String, CodingKey {
    {%- if entity.attributes.size > 0 %}
    // MARK: Attributes
    {%- endif -%}

        {%- for attribute in entity.attributes -%}
            {%- if attribute.json_key_path.size > 0 %}
    case {{ attribute.name }} = "{{ attribute.json_key_path }}"
            {%- else %}
    case {{ attribute.name }}
            {%- endif %}
        {%- endfor -%}

    {%- if entity.relationships.size > 0 %}

    // MARK: Relationships
    {%- endif -%}

    {%- for relationship in entity.relationships -%}
      {%- if relationship.inverse == false -%}

        {%- if relationship.json_key_path.size > 0 %}
    case {{ relationship.name }} = "{{ relationship.json_key_path }}"
        {%- else %}
    case {{ relationship.name }}
        {%- endif -%}

      {%- endif -%}
    {%- endfor %}
  }

// MARK: Decodable

  {% if params.public %}public {% endif %}required convenience init(from decoder: Decoder) throws {
    self.init()
    let container = try decoder.container(keyedBy: CodingKeys.self)

    {%- if entity.attributes.size > 0 %}

    // MARK: Attributes
    {%- endif %}

    {%- for attribute in entity.attributes %}
      {%- capture convert_type -%}
      {%- include 'inc/type_converter' -%}
      {%- endcapture %}

      {%- if attribute.optional == true and attribute.enum_type.size == 0 %}
        {%- case attribute.type -%}
        {%- when "integer_16" or "integer_32" or "integer_64" or "float" or "double" or "boolean" %}
    self.{{ attribute.name }}.value = try container.decodeIfPresent({{convert_type}}.self, forKey: .{{ attribute.name }})
        {%- else %}
    self.{{ attribute.name }} = try container.decodeIfPresent({{convert_type}}.self, forKey: .{{ attribute.name }})
        {%- endcase -%}
      {%- else %}
      {%- if attribute.optional == true %}
    self.{{ attribute.name }} = try container.decodeIfPresent(String.self, forKey: .{{ attribute.name }})
    {%- else %}
    self.{{ attribute.name }} = try container.decode({{convert_type}}.self, forKey: .{{ attribute.name }})
{%- endif %}
      {%- endif %}
    {%- endfor %}

    {%- if entity.relationships.size > 0 %}

    // MARK: Relationships
    {%- endif -%}

    {%- for relationship in entity.relationships -%}
      {%- if relationship.inverse == false -%}
        {% assign relationType = relationship.inverse_type -%}
        {%- if relationship.destination.size > 0 %}
          {% assign relationType = relationship.destination -%}
        {%- endif -%}
        {% assign relationKey = relationship.name -%}
        {%- if relationship.type == "to_many" %}
    let new{{ relationKey }} = try container.decodeIfPresent([{{ relationType }}].self, forKey: .{{ relationKey }}) ?? [{{ relationType }}]()
    {{ relationKey }}.append(objectsIn: new{{ relationKey }})
        {%- else %}
        {%- if attribute.optional == true %}
    self.{{ relationKey }} = try container.decode({{ relationType }}.self, forKey: .{{ relationKey }})
        {%- else %}
    self.{{ relationKey }} = try container.decodeIfPresent({{ relationType }}.self, forKey: .{{ relationKey }})
        {%- endif -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor %}
  }
}
